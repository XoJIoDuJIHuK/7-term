// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: service.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_Add_FullMethodName                 = "/example.Greeter/Add"
	Greeter_Mul_FullMethodName                 = "/example.Greeter/Mul"
	Greeter_Sub_FullMethodName                 = "/example.Greeter/Sub"
	Greeter_Div_FullMethodName                 = "/example.Greeter/Div"
	Greeter_Pow2_FullMethodName                = "/example.Greeter/Pow2"
	Greeter_ReallyHeavyFunction_FullMethodName = "/example.Greeter/ReallyHeavyFunction"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	Add(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error)
	Mul(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error)
	Sub(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error)
	Div(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error)
	Pow2(ctx context.Context, in *Parm1Request, opts ...grpc.CallOption) (*Parm1Result, error)
	ReallyHeavyFunction(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm1Result, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Add(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm2Result)
	err := c.cc.Invoke(ctx, Greeter_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Mul(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm2Result)
	err := c.cc.Invoke(ctx, Greeter_Mul_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Sub(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm2Result)
	err := c.cc.Invoke(ctx, Greeter_Sub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Div(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm2Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm2Result)
	err := c.cc.Invoke(ctx, Greeter_Div_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Pow2(ctx context.Context, in *Parm1Request, opts ...grpc.CallOption) (*Parm1Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm1Result)
	err := c.cc.Invoke(ctx, Greeter_Pow2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ReallyHeavyFunction(ctx context.Context, in *Parm2Request, opts ...grpc.CallOption) (*Parm1Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Parm1Result)
	err := c.cc.Invoke(ctx, Greeter_ReallyHeavyFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
type GreeterServer interface {
	Add(context.Context, *Parm2Request) (*Parm2Result, error)
	Mul(context.Context, *Parm2Request) (*Parm2Result, error)
	Sub(context.Context, *Parm2Request) (*Parm2Result, error)
	Div(context.Context, *Parm2Request) (*Parm2Result, error)
	Pow2(context.Context, *Parm1Request) (*Parm1Result, error)
	ReallyHeavyFunction(context.Context, *Parm2Request) (*Parm1Result, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) Add(context.Context, *Parm2Request) (*Parm2Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGreeterServer) Mul(context.Context, *Parm2Request) (*Parm2Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (UnimplementedGreeterServer) Sub(context.Context, *Parm2Request) (*Parm2Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedGreeterServer) Div(context.Context, *Parm2Request) (*Parm2Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedGreeterServer) Pow2(context.Context, *Parm1Request) (*Parm1Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pow2 not implemented")
}
func (UnimplementedGreeterServer) ReallyHeavyFunction(context.Context, *Parm2Request) (*Parm1Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReallyHeavyFunction not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Add(ctx, req.(*Parm2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Mul_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Mul(ctx, req.(*Parm2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Sub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Sub(ctx, req.(*Parm2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Div_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Div(ctx, req.(*Parm2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Pow2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Pow2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Pow2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Pow2(ctx, req.(*Parm1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ReallyHeavyFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parm2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ReallyHeavyFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_ReallyHeavyFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ReallyHeavyFunction(ctx, req.(*Parm2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Greeter_Add_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _Greeter_Mul_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Greeter_Sub_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Greeter_Div_Handler,
		},
		{
			MethodName: "Pow2",
			Handler:    _Greeter_Pow2_Handler,
		},
		{
			MethodName: "ReallyHeavyFunction",
			Handler:    _Greeter_ReallyHeavyFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
